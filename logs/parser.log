INFO:root:Successfully loaded source (tests/src/functions.py):
def x(y,z):
	return "hi"

flops = 4 #should be shadowed below

def giga(flops):
	1
	2
	"loL"
	return flops


# The S LOLmbinator!
def S(x,y):
	return x
 
# hack the gibson with higher order functions
def hack(the, gibson):
	return S

def f(giga):
	return hack

# Now we can call some funky funcs
S(1,"hi")

INFO:root:Parsed source. Raw AST is:
Module(body=[FunctionDef(name='x', args=arguments(args=[Name(id='y', ctx=Param()), Name(id='z', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Str(s='hi'))], decorator_list=[]), Assign(targets=[Name(id='flops', ctx=Store())], value=Num(n=4)), FunctionDef(name='giga', args=arguments(args=[Name(id='flops', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Expr(value=Num(n=1)), Expr(value=Num(n=2)), Expr(value=Str(s='loL')), Return(value=Name(id='flops', ctx=Load()))], decorator_list=[]), FunctionDef(name='S', args=arguments(args=[Name(id='x', ctx=Param()), Name(id='y', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='hack', args=arguments(args=[Name(id='the', ctx=Param()), Name(id='gibson', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='S', ctx=Load()))], decorator_list=[]), FunctionDef(name='f', args=arguments(args=[Name(id='giga', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='hack', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='S', ctx=Load()), args=[Num(n=1), Str(s='hi')], keywords=[], starargs=None, kwargs=None))])
INFO:root:Successfully loaded source (tests/src/functions.py):
def x(y,z):
	return "hi"

flops = 4 #should be shadowed below

def giga(flops):
	1
	2
	"loL"
	return flops


# The S LOLmbinator!
def S(x,y):
	return x
 
# hack the gibson with higher order functions
def hack(the, gibson):
	return S

def f(giga):
	return hack

# Now we can call some funky funcs
S(1,"hi")

INFO:root:Parsed source. Raw AST is:
Module(body=[FunctionDef(name='x', args=arguments(args=[Name(id='y', ctx=Param()), Name(id='z', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Str(s='hi'))], decorator_list=[]), Assign(targets=[Name(id='flops', ctx=Store())], value=Num(n=4)), FunctionDef(name='giga', args=arguments(args=[Name(id='flops', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Expr(value=Num(n=1)), Expr(value=Num(n=2)), Expr(value=Str(s='loL')), Return(value=Name(id='flops', ctx=Load()))], decorator_list=[]), FunctionDef(name='S', args=arguments(args=[Name(id='x', ctx=Param()), Name(id='y', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='hack', args=arguments(args=[Name(id='the', ctx=Param()), Name(id='gibson', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='S', ctx=Load()))], decorator_list=[]), FunctionDef(name='f', args=arguments(args=[Name(id='giga', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='hack', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='S', ctx=Load()), args=[Num(n=1), Str(s='hi')], keywords=[], starargs=None, kwargs=None))])
INFO:root:Successfully loaded source (tests/src/arithmetic.py):
(1 + 2.2) * 4 / 5 % 6 // 8

INFO:root:Parsed source. Raw AST is:
Module(body=[Expr(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=1), op=Add(), right=Num(n=2.2)), op=Mult(), right=Num(n=4)), op=Div(), right=Num(n=5)), op=Mod(), right=Num(n=6)), op=FloorDiv(), right=Num(n=8)))])
INFO:root:Successfully loaded source (tests/src/functions.py):
def x(y,z):
	return "hi"

flops = 4 #should be shadowed below

def giga(flops):
	1
	2
	"loL"
	return flops


# The S LOLmbinator!
def S(x,y):
	return x
 
# hack the gibson with higher order functions
def hack(the, gibson):
	return S

def f(giga):
	return hack

# Now we can call some funky funcs
S(1,"hi")

INFO:root:Parsed source. Raw AST is:
Module(body=[FunctionDef(name='x', args=arguments(args=[Name(id='y', ctx=Param()), Name(id='z', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Str(s='hi'))], decorator_list=[]), Assign(targets=[Name(id='flops', ctx=Store())], value=Num(n=4)), FunctionDef(name='giga', args=arguments(args=[Name(id='flops', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Expr(value=Num(n=1)), Expr(value=Num(n=2)), Expr(value=Str(s='loL')), Return(value=Name(id='flops', ctx=Load()))], decorator_list=[]), FunctionDef(name='S', args=arguments(args=[Name(id='x', ctx=Param()), Name(id='y', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='hack', args=arguments(args=[Name(id='the', ctx=Param()), Name(id='gibson', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='S', ctx=Load()))], decorator_list=[]), FunctionDef(name='f', args=arguments(args=[Name(id='giga', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='hack', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='S', ctx=Load()), args=[Num(n=1), Str(s='hi')], keywords=[], starargs=None, kwargs=None))])
INFO:root:Successfully loaded source (tests/src/functions.py):
def x(y,z):
	return "hi"

flops = 4 #should be shadowed below

def giga(flops):
	1
	2
	"loL"
	return flops


# The S LOLmbinator!
def S(x,y):
	return x
 
# hack the gibson with higher order functions
def hack(the, gibson):
	return S

def f(giga):
	return hack

# Now we can call some funky funcs
S(1,"hi")

INFO:root:Parsed source. Raw AST is:
Module(body=[FunctionDef(name='x', args=arguments(args=[Name(id='y', ctx=Param()), Name(id='z', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Str(s='hi'))], decorator_list=[]), Assign(targets=[Name(id='flops', ctx=Store())], value=Num(n=4)), FunctionDef(name='giga', args=arguments(args=[Name(id='flops', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Expr(value=Num(n=1)), Expr(value=Num(n=2)), Expr(value=Str(s='loL')), Return(value=Name(id='flops', ctx=Load()))], decorator_list=[]), FunctionDef(name='S', args=arguments(args=[Name(id='x', ctx=Param()), Name(id='y', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='hack', args=arguments(args=[Name(id='the', ctx=Param()), Name(id='gibson', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='S', ctx=Load()))], decorator_list=[]), FunctionDef(name='f', args=arguments(args=[Name(id='giga', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='hack', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='S', ctx=Load()), args=[Num(n=1), Str(s='hi')], keywords=[], starargs=None, kwargs=None))])
INFO:root:Successfully loaded source (tests/src/arithmetic.py):
(1 + 2.2) * 4 / 5 % 6 // 8

INFO:root:Parsed source. Raw AST is:
Module(body=[Expr(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=1), op=Add(), right=Num(n=2.2)), op=Mult(), right=Num(n=4)), op=Div(), right=Num(n=5)), op=Mod(), right=Num(n=6)), op=FloorDiv(), right=Num(n=8)))])
INFO:root:Successfully loaded source (tests/src/functions.py):
def x(y,z):
	return "hi"

flops = 4 #should be shadowed below

def giga(flops):
	1
	2
	"loL"
	return flops


# The S LOLmbinator!
def S(x,y):
	return x
 
# hack the gibson with higher order functions
def hack(the, gibson):
	return S

def f(giga):
	return hack

# Now we can call some funky funcs
S(1,"hi")

INFO:root:Parsed source. Raw AST is:
Module(body=[FunctionDef(name='x', args=arguments(args=[Name(id='y', ctx=Param()), Name(id='z', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Str(s='hi'))], decorator_list=[]), Assign(targets=[Name(id='flops', ctx=Store())], value=Num(n=4)), FunctionDef(name='giga', args=arguments(args=[Name(id='flops', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Expr(value=Num(n=1)), Expr(value=Num(n=2)), Expr(value=Str(s='loL')), Return(value=Name(id='flops', ctx=Load()))], decorator_list=[]), FunctionDef(name='S', args=arguments(args=[Name(id='x', ctx=Param()), Name(id='y', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='hack', args=arguments(args=[Name(id='the', ctx=Param()), Name(id='gibson', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='S', ctx=Load()))], decorator_list=[]), FunctionDef(name='f', args=arguments(args=[Name(id='giga', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='hack', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='S', ctx=Load()), args=[Num(n=1), Str(s='hi')], keywords=[], starargs=None, kwargs=None))])
INFO:root:Successfully loaded source (tests/src/functions.py):
def x(y,z):
	return "hi"

flops = 4 #should be shadowed below

def giga(flops):
	1
	2
	"loL"
	return flops


# The S LOLmbinator!
def S(x,y):
	return x
 
# hack the gibson with higher order functions
def hack(the, gibson):
	return S

def f(giga):
	return hack

# Now we can call some funky funcs
S(1,"hi")

INFO:root:Parsed source. Raw AST is:
Module(body=[FunctionDef(name='x', args=arguments(args=[Name(id='y', ctx=Param()), Name(id='z', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Str(s='hi'))], decorator_list=[]), Assign(targets=[Name(id='flops', ctx=Store())], value=Num(n=4)), FunctionDef(name='giga', args=arguments(args=[Name(id='flops', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Expr(value=Num(n=1)), Expr(value=Num(n=2)), Expr(value=Str(s='loL')), Return(value=Name(id='flops', ctx=Load()))], decorator_list=[]), FunctionDef(name='S', args=arguments(args=[Name(id='x', ctx=Param()), Name(id='y', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), FunctionDef(name='hack', args=arguments(args=[Name(id='the', ctx=Param()), Name(id='gibson', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='S', ctx=Load()))], decorator_list=[]), FunctionDef(name='f', args=arguments(args=[Name(id='giga', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='hack', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='S', ctx=Load()), args=[Num(n=1), Str(s='hi')], keywords=[], starargs=None, kwargs=None))])
INFO:root:Successfully loaded source (tests/src/arithmetic.py):
(1 + 2.2) * 4 / 5 % 6 // 8

INFO:root:Parsed source. Raw AST is:
Module(body=[Expr(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Num(n=1), op=Add(), right=Num(n=2.2)), op=Mult(), right=Num(n=4)), op=Div(), right=Num(n=5)), op=Mod(), right=Num(n=6)), op=FloorDiv(), right=Num(n=8)))])

import sys, os
from src.typed_ast.typed_ast import *

# XXX horribly repetitious
def main():
	os.system('clear')
	print("Basic inference of assignments..")
	ta = TypedAST("src/tests/assignment.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	os.system('clear')
	print("Full typed abstract syntax tree:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')
	print("Inference of built-in arithmetic..")
	ta2 = TypedAST("src/tests/arithmetic.py")
	ta2.print_src()
	raw_input()
	print("Final type environment:")
	ta2.print_modules()
	print(ta2.format_tree())
	raw_input()

	os.system('clear')
	print("Type inference of function definitions and calls..")
	ta = TypedAST("src/tests/functions1.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	print("Full typed abstract syntax tree:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')
	print("More function type inference..")
	ta = TypedAST("src/tests/functions2.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	print("Full typed abstract syntax tree:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')
	print("Attributes and open types inside function definitions")
	ta = TypedAST("src/tests/functions3.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	print("Full typed abstract syntax tree:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')	
	print("Type inference of class definitions..")
	ta = TypedAST("src/tests/classes1.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	os.system('clear')
	print("Typed AST:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')	
	print("Type inference of constructors attribute references..")
	ta = TypedAST("src/tests/classes2.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	os.system('clear')
	print("Typed AST:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')	
	print("Type inference of references inside functions")
	ta = TypedAST("src/tests/classes3.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	os.system('clear')
	print("Typed AST:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')	
	print("Type errors for undefined attributes")
	ta = TypedAST("src/tests/classes4.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	os.system('clear')
	print("Typed AST:")
	print(ta.format_tree())
	raw_input()

	os.system('clear')	
	print("Type errors for undefined attributes inside functions")
	ta = TypedAST("src/tests/classes5.py")
	ta.print_src()
	raw_input()
	print("Final type environment:")
	ta.print_modules()
	raw_input()
	os.system('clear')
	print("Typed AST:")
	print(ta.format_tree())
	raw_input()

if __name__ == "__main__":
	main()

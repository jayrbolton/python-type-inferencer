INFO:root:Parsing and traversing the source...
INFO:root:Source is a filename, opening and reading
INFO:root:Loaded source (src/tests/classes.py):
# Class definition

class A(object):
	# Assignment attributes
	z = 1

	def __init__(self,x):
		self.x = x
		self.y = "str"
		self.n = 1
#
#	# Static methods	
#	def smethod(p1): return p1 # : (a{}) -> a{}
#
#	# Instance methods
#	def imethod(self): return self # : (A{...}) -> A{...}
#
## Construction
#
#a = A() # : A{...}
#
## Attribute reference
#
#y = a.z # : int
#
## Static method reference
#
#z = A.smethod(1)
#
## Instance method reference
#
#z = a.imethod()
#
### Type errors:
#
## Undefined attributes
#a.wat
#A.wat
#a.smethod()
#A.imethod()
#

INFO:root:Parsed source. Raw AST is:
Module(body=[ClassDef(name='A', bases=[Name(id='object', ctx=Load(), lineno=3, col_offset=8)], body=[Assign(targets=[Name(id='z', ctx=Store(), lineno=5, col_offset=1)], value=Num(n=1, lineno=5, col_offset=5), lineno=5, col_offset=1), FunctionDef(name='__init__', args=arguments(args=[Name(id='self', ctx=Param(), lineno=7, col_offset=14), Name(id='x', ctx=Param(), lineno=7, col_offset=19)], vararg=None, kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=8, col_offset=2), attr='x', ctx=Store(), lineno=8, col_offset=2)], value=Name(id='x', ctx=Load(), lineno=8, col_offset=11), lineno=8, col_offset=2), Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=9, col_offset=2), attr='y', ctx=Store(), lineno=9, col_offset=2)], value=Str(s='str', lineno=9, col_offset=11), lineno=9, col_offset=2), Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=10, col_offset=2), attr='n', ctx=Store(), lineno=10, col_offset=2)], value=Num(n=1, lineno=10, col_offset=11), lineno=10, col_offset=2)], decorator_list=[], lineno=7, col_offset=1)], decorator_list=[], lineno=3, col_offset=0)])
INFO:root:Traversing a module...
DEBUG:root:Envenvenv: {'z': <type 'int'>}
DEBUG:root:Envenvenv: {'self': s{'x': t0{}}, 'x': t0{}, 'z': <type 'int'>}
DEBUG:root:Envenvenv: {'self': s{'x': t0{}, 'y': <type 'str'>}, 'x': t0{}, 'z': <type 'int'>}
DEBUG:root:Envenvenv: {'self': s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}, 'x': t0{}, 'z': <type 'int'>}
DEBUG:root:found init, env1: {'__init__': t2{'*return': <type 'NoneType'>, '*params': tuple1[s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}, t0{}]}, 'self': s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}, 'z': <type 'int'>}
INFO:root:Analyzed Tree:
INFO:root:  src/tests/classes.py
  Type: src/tests/classes.py{'A': A{'*return': t3{'n': <type 'int'>, 'x': t0{}, 'z': <type 'int'>, 'y': <type 'str'>}, '*params': tuple4[], 'z': <type 'int'>}}
  Body: 
    Class Definition
    Type: A{'*return': t3{'n': <type 'int'>, 'x': t0{}, 'z': <type 'int'>, 'y': <type 'str'>}, '*params': tuple4[], 'z': <type 'int'>}
    Name: A
    Superclasses: []
    Body: 
      Assignment
      Type: <type 'int'>
      Targets: 
        Name Node
        Type: <type 'int'>
        id = z
      Value: 
        Number
        Type: <type 'int'>
        n =  1
      Function Definition
      Type: t2{'*return': <type 'NoneType'>, '*params': tuple1[s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}, t0{}]}
      Name: __init__
      Arguments:
        Arguments
        Type: tuple1[s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}, t0{}]
      Body: 
        Assignment
        Type: t0{}
        Targets: 
          Attribute Reference
          Type: t0{}
          Object: 
            Name Node
            Type: s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}
            id = self
          Attribute: x
        Value: 
          Name Node
          Type: t0{}
          id = x
        Assignment
        Type: <type 'str'>
        Targets: 
          Attribute Reference
          Type: <type 'str'>
          Object: 
            Name Node
            Type: s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}
            id = self
          Attribute: y
        Value: 
          String
          Type: <type 'str'>
          s =  str
        Assignment
        Type: <type 'int'>
        Targets: 
          Attribute Reference
          Type: <type 'int'>
          Object: 
            Name Node
            Type: s{'n': <type 'int'>, 'x': t0{}, 'y': <type 'str'>}
            id = self
          Attribute: n
        Value: 
          Number
          Type: <type 'int'>
          n =  1


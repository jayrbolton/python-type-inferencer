INFO:root:Parsing and traversing the source...
INFO:root:Source is a filename, opening and reading
INFO:root:Loaded source (src/tests/classes.py):
# Class definition

class A(object):
	# Assignment attributes
	z = 1

	def __init__(self,x):
		self.x = x
		self.y = "str"
		self.n = 1

	def __add__(self,n): return n

	# Static methods	
	def smethod(p1): return p1 # : (a{}) -> a{}

	# Instance methods
	def imethod(self): return self # : (A{...}) -> A{...}

# Construction

a = A() # : A{...}

# Attribute reference

y = a.z # : int

# Operator overloading

q = a + 2  # : int

# Static method reference

z = A.smethod(1)

# Instance method reference

z = a.imethod()

## Type errors:

# Undefined attributes
a.wat
A.wat
a.smethod()
A.imethod()

INFO:root:Parsed source. Raw AST is:
Module(body=[ClassDef(name='A', bases=[Name(id='object', ctx=Load(), lineno=3, col_offset=8)], body=[Assign(targets=[Name(id='z', ctx=Store(), lineno=5, col_offset=1)], value=Num(n=1, lineno=5, col_offset=5), lineno=5, col_offset=1), FunctionDef(name='__init__', args=arguments(args=[Name(id='self', ctx=Param(), lineno=7, col_offset=14), Name(id='x', ctx=Param(), lineno=7, col_offset=19)], vararg=None, kwarg=None, defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=8, col_offset=2), attr='x', ctx=Store(), lineno=8, col_offset=2)], value=Name(id='x', ctx=Load(), lineno=8, col_offset=11), lineno=8, col_offset=2), Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=9, col_offset=2), attr='y', ctx=Store(), lineno=9, col_offset=2)], value=Str(s='str', lineno=9, col_offset=11), lineno=9, col_offset=2), Assign(targets=[Attribute(value=Name(id='self', ctx=Load(), lineno=10, col_offset=2), attr='n', ctx=Store(), lineno=10, col_offset=2)], value=Num(n=1, lineno=10, col_offset=11), lineno=10, col_offset=2)], decorator_list=[], lineno=7, col_offset=1), FunctionDef(name='__add__', args=arguments(args=[Name(id='self', ctx=Param(), lineno=12, col_offset=13), Name(id='n', ctx=Param(), lineno=12, col_offset=18)], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='n', ctx=Load(), lineno=12, col_offset=29), lineno=12, col_offset=22)], decorator_list=[], lineno=12, col_offset=1), FunctionDef(name='smethod', args=arguments(args=[Name(id='p1', ctx=Param(), lineno=15, col_offset=13)], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='p1', ctx=Load(), lineno=15, col_offset=25), lineno=15, col_offset=18)], decorator_list=[], lineno=15, col_offset=1), FunctionDef(name='imethod', args=arguments(args=[Name(id='self', ctx=Param(), lineno=18, col_offset=13)], vararg=None, kwarg=None, defaults=[]), body=[Return(value=Name(id='self', ctx=Load(), lineno=18, col_offset=27), lineno=18, col_offset=20)], decorator_list=[], lineno=18, col_offset=1)], decorator_list=[], lineno=3, col_offset=0), Assign(targets=[Name(id='a', ctx=Store(), lineno=22, col_offset=0)], value=Call(func=Name(id='A', ctx=Load(), lineno=22, col_offset=4), args=[], keywords=[], starargs=None, kwargs=None, lineno=22, col_offset=4), lineno=22, col_offset=0), Assign(targets=[Name(id='y', ctx=Store(), lineno=26, col_offset=0)], value=Attribute(value=Name(id='a', ctx=Load(), lineno=26, col_offset=4), attr='z', ctx=Load(), lineno=26, col_offset=4), lineno=26, col_offset=0), Assign(targets=[Name(id='q', ctx=Store(), lineno=30, col_offset=0)], value=BinOp(left=Name(id='a', ctx=Load(), lineno=30, col_offset=4), op=Add(), right=Num(n=2, lineno=30, col_offset=8), lineno=30, col_offset=4), lineno=30, col_offset=0), Assign(targets=[Name(id='z', ctx=Store(), lineno=34, col_offset=0)], value=Call(func=Attribute(value=Name(id='A', ctx=Load(), lineno=34, col_offset=4), attr='smethod', ctx=Load(), lineno=34, col_offset=4), args=[Num(n=1, lineno=34, col_offset=14)], keywords=[], starargs=None, kwargs=None, lineno=34, col_offset=4), lineno=34, col_offset=0), Assign(targets=[Name(id='z', ctx=Store(), lineno=38, col_offset=0)], value=Call(func=Attribute(value=Name(id='a', ctx=Load(), lineno=38, col_offset=4), attr='imethod', ctx=Load(), lineno=38, col_offset=4), args=[], keywords=[], starargs=None, kwargs=None, lineno=38, col_offset=4), lineno=38, col_offset=0), Expr(value=Attribute(value=Name(id='a', ctx=Load(), lineno=43, col_offset=0), attr='wat', ctx=Load(), lineno=43, col_offset=0), lineno=43, col_offset=0), Expr(value=Attribute(value=Name(id='A', ctx=Load(), lineno=44, col_offset=0), attr='wat', ctx=Load(), lineno=44, col_offset=0), lineno=44, col_offset=0), Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load(), lineno=45, col_offset=0), attr='smethod', ctx=Load(), lineno=45, col_offset=0), args=[], keywords=[], starargs=None, kwargs=None, lineno=45, col_offset=0), lineno=45, col_offset=0), Expr(value=Call(func=Attribute(value=Name(id='A', ctx=Load(), lineno=46, col_offset=0), attr='imethod', ctx=Load(), lineno=46, col_offset=0), args=[], keywords=[], starargs=None, kwargs=None, lineno=46, col_offset=0), lineno=46, col_offset=0)])
INFO:root:Traversing a module...
INFO:root:Unifying a function call...
INFO:root:Given type: A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}
INFO:root:Applied type: t131{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, '*params': tuple130[]}
INFO:root:Substitution: [t78 >> t78{},t120 >> t120{},self >> s{},]
DEBUG:root:Unified type: t131{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, '*params': tuple130[]}
INFO:root:Unifying a function call...
INFO:root:Given type: t125{'*return': t123{}, '*params': tuple124[t123{}]}
INFO:root:Applied type: t161{'*return': t123{}, '*params': tuple160[<type 'int'>]}
INFO:root:Substitution: [t123 >> <type 'int'>,]
DEBUG:root:Unified type: t161{'*return': <type 'int'>, '*params': tuple160[<type 'int'>]}
INFO:root:Unifying a function call...
INFO:root:Given type: t127{'*return': s{}, '*params': tuple126[s{}]}
INFO:root:Applied type: t163{'*return': s{}, '*params': tuple162[s{}]}
INFO:root:Substitution: [self >> s{},]
DEBUG:root:Unified type: t163{'*return': s{}, '*params': tuple162[s{}]}
INFO:root:Unifying a function call...
INFO:root:Given type: <<Type error, line 45: Object: t128 has no attribute: smethod>>
INFO:root:Unifying a function call...
INFO:root:Given type: <<Type error, line 46: Object: A has no attribute: imethod>>
INFO:root:Analyzed Tree:
INFO:root:  src/tests/classes.py
  Type: src/tests/classes.py{'a': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'z': s{}, 'A': A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}, 'y': <type 'int'>, 'q': <type 'int'>}
  Body: 
    Class Definition
    Type: A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}
    Name: A
    Superclasses: []
    Body: 
      Assignment
      Type: <type 'int'>
      Targets: 
        Name Node
        Type: <type 'int'>
        id = z
      Value: 
        Number
        Type: <type 'int'>
        n =  1
      Function Definition
      Type: t119{'*return': <type 'NoneType'>, '*params': tuple79[s{'n': <type 'int'>, 'x': t78{}, 'y': <type 'str'>}, t78{}]}
      Name: __init__
      Arguments:
        Arguments
        Type: tuple79[s{'n': <type 'int'>, 'x': t78{}, 'y': <type 'str'>}, t78{}]
      Body: 
        Assignment
        Type: t78{}
        Targets: 
          Attribute Reference
          Type: t78{}
          Object: 
            Name Node
            Type: s{'n': <type 'int'>, 'x': t78{}, 'y': <type 'str'>}
            id = self
          Attribute: x
        Value: 
          Name Node
          Type: t78{}
          id = x
        Assignment
        Type: <type 'str'>
        Targets: 
          Attribute Reference
          Type: <type 'str'>
          Object: 
            Name Node
            Type: s{'n': <type 'int'>, 'x': t78{}, 'y': <type 'str'>}
            id = self
          Attribute: y
        Value: 
          String
          Type: <type 'str'>
          s =  str
        Assignment
        Type: <type 'int'>
        Targets: 
          Attribute Reference
          Type: <type 'int'>
          Object: 
            Name Node
            Type: s{'n': <type 'int'>, 'x': t78{}, 'y': <type 'str'>}
            id = self
          Attribute: n
        Value: 
          Number
          Type: <type 'int'>
          n =  1
      Function Definition
      Type: t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}
      Name: __add__
      Arguments:
        Arguments
        Type: tuple121[s{}, t120{}]
      Body: 
        Return
        Type: t120{}
        Value: 
          Name Node
          Type: t120{}
          id = n
      Function Definition
      Type: t125{'*return': t123{}, '*params': tuple124[t123{}]}
      Name: smethod
      Arguments:
        Arguments
        Type: tuple124[t123{}]
      Body: 
        Return
        Type: t123{}
        Value: 
          Name Node
          Type: t123{}
          id = p1
      Function Definition
      Type: t127{'*return': s{}, '*params': tuple126[s{}]}
      Name: imethod
      Arguments:
        Arguments
        Type: tuple126[s{}]
      Body: 
        Return
        Type: s{}
        Value: 
          Name Node
          Type: s{}
          id = self
    Assignment
    Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
    Targets: 
      Name Node
      Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
      id = a
    Value: 
      Function Call
      Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
      Function: 
        Name Node
        Type: A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}
        id = A
      Arguments: 
    Assignment
    Type: <type 'int'>
    Targets: 
      Name Node
      Type: <type 'int'>
      id = y
    Value: 
      Attribute Reference
      Type: <type 'int'>
      Object: 
        Name Node
        Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
        id = a
      Attribute: z
    Assignment
    Type: <type 'int'>
    Targets: 
      Name Node
      Type: <type 'int'>
      id = q
    Value: 
      Binary Operator
      Type: <type 'int'>
      Operator: __add__
      Left: 
        Name Node
        Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
        id = a
      Right: 
        Number
        Type: <type 'int'>
        n =  2
    Assignment
    Type: <type 'int'>
    Targets: 
      Name Node
      Type: <type 'int'>
      id = z
    Value: 
      Function Call
      Type: <type 'int'>
      Function: 
        Attribute Reference
        Type: t125{'*return': t123{}, '*params': tuple124[t123{}]}
        Object: 
          Name Node
          Type: A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}
          id = A
        Attribute: smethod
      Arguments: 
        Number
        Type: <type 'int'>
        n =  1
    Assignment
    Type: s{}
    Targets: 
      Name Node
      Type: s{}
      id = z
    Value: 
      Function Call
      Type: s{}
      Function: 
        Attribute Reference
        Type: t127{'*return': s{}, '*params': tuple126[s{}]}
        Object: 
          Name Node
          Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
          id = a
        Attribute: imethod
      Arguments: 
    Expression
    Type: <<Type error, line 43: Object: t128 has no attribute: wat>>
    Body: 
      Attribute Reference
      Type: <<Type error, line 43: Object: t128 has no attribute: wat>>
      Object: 
        Name Node
        Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
        id = a
      Attribute: wat
    Expression
    Type: <<Type error, line 44: Object: A has no attribute: wat>>
    Body: 
      Attribute Reference
      Type: <<Type error, line 44: Object: A has no attribute: wat>>
      Object: 
        Name Node
        Type: A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}
        id = A
      Attribute: wat
    Expression
    Type: <<Type error, line 45: Object: t128 has no attribute: smethod>>
    Body: 
      Function Call
      Type: <<Type error, line 45: Object: t128 has no attribute: smethod>>
      Function: 
        Attribute Reference
        Type: <<Type error, line 45: Object: t128 has no attribute: smethod>>
        Object: 
          Name Node
          Type: t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}
          id = a
        Attribute: smethod
      Arguments: 
    Expression
    Type: <<Type error, line 46: Object: A has no attribute: imethod>>
    Body: 
      Function Call
      Type: <<Type error, line 46: Object: A has no attribute: imethod>>
      Function: 
        Attribute Reference
        Type: <<Type error, line 46: Object: A has no attribute: imethod>>
        Object: 
          Name Node
          Type: A{'*return': t128{'n': <type 'int'>, 'imethod': t127{'*return': s{}, '*params': tuple126[s{}]}, 'x': t78{}, 'z': <type 'int'>, '__add__': t122{'*return': t120{}, '*params': tuple121[s{}, t120{}]}, 'y': <type 'str'>}, 'smethod': t125{'*return': t123{}, '*params': tuple124[t123{}]}, '*params': tuple129[], 'z': <type 'int'>}
          id = A
        Attribute: imethod
      Arguments: 

